The provided code is a **log analysis tool** that scans network logs to detect potential security threats based on predefined attack patterns. When suspicious activity is found, it generates an **intrusion detection report**. The analysis results are saved as a **JSON file** and also displayed in the console.

Let's break it down in detail:

---

### ðŸ§© **Step-by-Step Explanation**

#### 1. **Imports**

```python
import os
import re
import json
from datetime import datetime
```

* `os`: Not used in the provided code, but it could be used for file or directory operations.
* `re`: Python's **regular expressions** module used to search and match patterns in strings (used to extract IP addresses from log entries).
* `json`: For reading and writing JSON data.
* `datetime`: To get the current date and time when an intrusion is detected.

---

#### 2. **Simulated Log Files**

```python
log_files = {
    "user1.log": [
        "192.168.1.10 - Failed login attempt",
        "192.168.1.11 - SSH connection established",
        "192.168.1.10 - Failed login attempt",
        "192.168.1.10 - Failed login attempt",
        "192.168.1.50 - Port scan detected",
    ],
    "user2.log": [
        "192.168.2.20 - Failed login attempt",
        "192.168.2.20 - Failed login attempt",
        "192.168.2.20 - Failed login attempt",
        "192.168.2.30 - Suspicious traffic detected",
    ],
    "user3.log": [
        "192.168.3.40 - Failed login attempt",
        "192.168.3.40 - Failed login attempt",
        "192.168.3.41 - Unusual network activity",
    ],
}
```

* `log_files` is a **dictionary** where the keys are the log file names (e.g., `user1.log`) and the values are **lists of log entries**.
* Each log entry contains an **IP address** and a description of the event (e.g., "Failed login attempt", "Port scan detected").

---

#### 3. **Attack Patterns to Detect**

```python
attack_patterns = {
    "Failed login attempt": "Brute Force Attack",
    "Port scan detected": "Port Scanning",
    "Suspicious traffic detected": "Malware Activity",
    "Unusual network activity": "Possible Intrusion"
}
```

* `attack_patterns` is a **dictionary** mapping the text descriptions of log events to specific types of attacks.
* These patterns are used to identify suspicious or malicious activities in the logs.

---

#### 4. **Function to Analyze Logs and Detect Attacks**

```python
def analyze_logs(log_files):
    intrusion_reports = {}
```

* `analyze_logs()` processes the log files and checks each log entry against the attack patterns.

```python
    for log_file, logs in log_files.items():
        for log_entry in logs:
            for pattern, attack_type in attack_patterns.items():
                if pattern in log_entry:
```

* Loops through each log file and its entries.
* Compares each log entry with the attack patterns.

```python
                    ip = re.search(r"\d+\.\d+\.\d+\.\d+", log_entry).group()  # Extract IP address
                    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
```

* **Extracts the IP address** from the log entry using regular expressions.
* **Generates a timestamp** of when the attack is detected (current date and time).

```python
                    if ip not in intrusion_reports:
                        intrusion_reports[ip] = []
```

* If the IP address hasn't been encountered before, it adds a new entry for it in `intrusion_reports`.

```python
                    intrusion_reports[ip].append({
                        "attack_type": attack_type,
                        "log_file": log_file,
                        "timestamp": timestamp,
                        "log_entry": log_entry
                    })
```

* Appends the attack information for that IP, including the attack type, log file, timestamp, and original log entry.

```python
    return intrusion_reports
```

* Finally, the function returns the `intrusion_reports`, which contains all detected intrusions grouped by IP address.

---

#### 5. **Saving the Report as JSON**

```python
intrusion_report = analyze_logs(log_files)

report_file = "intrusion_report.json"
with open(report_file, "w") as file:
    json.dump(intrusion_report, file, indent=4)
```

* `analyze_logs()` is called to generate the intrusion report.
* The report is then saved in a JSON file (`intrusion_report.json`) using `json.dump()` with an indentation level of 4 for readability.

---

#### 6. **Displaying the Report Summary**

```python
print("\nðŸ”¹ Intrusion Detection Report ðŸ”¹")
for ip, attacks in intrusion_report.items():
    print(f"\n[!] Intrusion detected from IP: {ip}")
    for attack in attacks:
        print(f" - Type: {attack['attack_type']}, Log: {attack['log_entry']}, Time: {attack['timestamp']}")
```

* Prints a summary of the detected intrusions in a human-readable format.
* For each IP address with intrusions, it prints the attack type, log entry, and the timestamp of the detection.

---

#### 7. **Final Output Message**

```python
print(f"\nðŸ“Œ Detailed report saved in: {report_file}")
```

* Displays the message that the detailed report has been saved to the JSON file.

---

### ðŸ“Š **Output Example**

For example, after running the code, the output in the console might look like this:

```
ðŸ”¹ Intrusion Detection Report ðŸ”¹

[!] Intrusion detected from IP: 192.168.1.10
 - Type: Brute Force Attack, Log: 192.168.1.10 - Failed login attempt, Time: 2025-05-04 12:34:56
 - Type: Brute Force Attack, Log: 192.168.1.10 - Failed login attempt, Time: 2025-05-04 12:34:56
 - Type: Brute Force Attack, Log: 192.168.1.10 - Failed login attempt, Time: 2025-05-04 12:34:56

[!] Intrusion detected from IP: 192.168.1.50
 - Type: Port Scanning, Log: 192.168.1.50 - Port scan detected, Time: 2025-05-04 12:34:56
```

Additionally, the detailed report is saved in `intrusion_report.json`.

---

### ðŸ“‚ **Generated JSON Report Example**

```json
{
    "192.168.1.10": [
        {
            "attack_type": "Brute Force Attack",
            "log_file": "user1.log",
            "timestamp": "2025-05-04 12:34:56",
            "log_entry": "192.168.1.10 - Failed login attempt"
        },
        {
            "attack_type": "Brute Force Attack",
            "log_file": "user1.log",
            "timestamp": "2025-05-04 12:34:56",
            "log_entry": "192.168.1.10 - Failed login attempt"
        }
    ]
}
```

---

### ðŸ§© **Summary**

This script processes simulated log files to detect security threats (e.g., brute force attacks, port scanning). It detects known attack patterns in the logs, extracts relevant information (like IP and timestamp), and generates a security report in both **human-readable format** (printed to the console) and **machine-readable JSON** format (saved to a file).

#### Potential Improvements:

* Implement real-time log file monitoring (e.g., watching new log entries as they arrive).
* Add more attack patterns and refine the pattern matching (e.g., regex for more complex log entries).
* Integrate this into a larger **security monitoring** system.

Would you like to add more attack patterns or expand the log analysis features?
